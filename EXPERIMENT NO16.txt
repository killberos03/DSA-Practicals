EXPERIMENT NO:16

Beginning with an empty binary search tree, Construct binary search tree by inserting the values in the order given. After constructing a binary tree iv. Change a tree so that the roles of the left and right pointers are swapped at every node.

CODE:

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = nullptr;
        right = nullptr;
    }
};

// Function to insert a new node in the BST
Node* insert(Node* root, int val) {
    if (root == nullptr) {
        return new Node(val);
    }

    if (val < root->data) {
        root->left = insert(root->left, val);
    } else {
        root->right = insert(root->right, val);
    }

    return root;
}

// Function to swap left and right child pointers at each node in the BST
void swapLeftRight(Node* root) {
    if (root == nullptr) {
        return;
    }

    Node* temp = root->left;
    root->left = root->right;
    root->right = temp;

    swapLeftRight(root->left);
    swapLeftRight(root->right);
}

// Function to display the modified BST
void displayTree(Node* root) {
    if (root == nullptr) {
        return;
    }

    cout << root->data << " ";
    displayTree(root->left);
    displayTree(root->right);
}

int main() {
    Node* root = nullptr;

    // Values to be inserted to construct the binary search tree
    int values[] = {50, 30, 70, 20, 40, 60, 80};
    for (int val : values) {
        root = insert(root, val);
    }

    // Swap left and right pointers at each node in the BST
    swapLeftRight(root);

    // Display the modified BST
    cout << "Modified BST after swapping left and right pointers:\n";
    displayTree(root);
    cout << endl;

    return 0;
}
